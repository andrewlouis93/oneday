<script>

function activeTab($this){
		$('.nav-tabs li').removeClass('active');
		$this.addClass('active');	
}

// Submenu control
$(document).on('click', '.nav-tabs li', function(event){
	if ($(this).hasClass('active')){
		console.log("mah here");
		return;
	}
	else if ($(this).attr('id') == 'week_graph'){
		drawGraph( getWeekGraphValues() );
		activeTab($(this));
	}
	else if ($(this).attr('id') == 'month_graph'){
		drawGraph( getMonthGraphValues() );
		activeTab($(this));
	}
	else if ($(this).attr('id') == 'year_graph'){
		drawGraph( getYearlyGraphValues() );
		activeTab($(this));
	}
});

// Camel Case - structures used in graphing/analysis
// Underscores - intermediates
function DateObj(iso8601){
	// Look into how the unary operator works.
	this.date = +moment(iso8601).format('D');
	this.month = +moment(iso8601).format('M');
	this.year = +moment(iso8601).format('YYYY');
	this.day = moment(iso8601).format('dddd');

	this.task_list = [];
}

function setupGraphValues_Week(){
	var weekGraphVals = [];
	for ( var i = 0; i < 7; i++ ){
		//Walking back seven days. 
		var currDate = moment().subtract('days', i);
		var tempDate = new DateObj(currDate.format());
		weekGraphVals.push( tempDate );
	}
	return weekGraphVals;
}

function setupGraphValues_Month(){
	var monthlyGraphVals = [];
	var values = ['This week', '1 week ago', '2 weeks ago', '3 weeks ago'];

	for ( var i = 0; i < values.length; i++ ){
		var obj = {label: values[i], values: []};
		obj.values = $("#past_week_data_"+ i +"").data('url');
		// Changing values from regular objects to DateObjs.
		for ( var j = 0; j < obj.values.length; j++ ){
			var task = obj.values[j].name;
			obj.values[j] = new DateObj( obj.values[j].updated_at );
			obj.values[j].task_list.push( task );
		}
		monthlyGraphVals.push( obj );
	}
	return monthlyGraphVals;
}

function setupGraphValues_Year(){
	var yearlyGraphVals = [];

	var values = ($('#this_year_data').data('url').reverse()).slice(0);

	for ( var i = 0; i < values.length; i++ ){
		var obj = { label: moment( String(i+1) ).format('MMMM'), values: [] };
		//Changing values from regualr objects to DateObjs
		for (var j = 0; j < values[i].length; j++){
			var task = values[i][j].name;
			values[i][j] = new DateObj( values[i][j].updated_at );
			values[i][j].task_list.push( task );
			obj.values.push( values[i][j] )
		}
		yearlyGraphVals.push( obj );
	}
	return yearlyGraphVals;
}

function updateCount( db_entry, graphValues ){

	var iso8601 = db_entry.updated_at;

	// Date to add one task to
	var addTo = new DateObj( iso8601 );

	var findVal = _.findWhere( graphValues, { 
		date: addTo.date,
		month: addTo.month,
		year: addTo.year
	 } );

	//If entry found, and it should unless you designed wrong.
	if (findVal){
		// Rets shallow copy, so we can modify graphValues from here
		findVal.task_list.push( db_entry.name ); 
	}

}

function getWeekData(){

	var weekGraphValues = setupGraphValues_Week();
	var week_data = $('#week_data').data('url');

	_.each( week_data, function( entry ){
		updateCount( entry , weekGraphValues );
	});

	return weekGraphValues;	
}
// Format the raw data like so for nvd3	
// {key: "Title", values: [{label: "...", value: 10},{...},{...}]}
function getWeekGraphValues(){
	var raw = getWeekData();
	var toGraph = {};

	toGraph.key = "Tasks from the Last 7 Days";
	toGraph.values = [];

	_.each(raw, function(entry){
		var obj = {     
						label: entry.day,
						value: entry.task_list.length
				  };
		toGraph.values.push( obj );
	});

	toGraph.values.reverse();
	return [toGraph];
}

function getMonthGraphValues(){
	var raw = setupGraphValues_Month();

	var toGraph = {};
	toGraph.key = "Tasks from the Last Month";
	toGraph.values = [];

	_.each(raw, function(entry){
		var obj = {
			label: entry.label,
			value: entry.values.length
		};
		toGraph.values.push( obj );
	});

	toGraph.values.reverse();
	return [toGraph];
}

function getYearlyGraphValues(){
	var raw = setupGraphValues_Year();

	var toGraph = {};
	toGraph.key = "Tasks from the Last Year";
	toGraph.values = [];

	_.each(raw, function(entry){
		var obj = {
			label: entry.label,
			value: entry.values.length
		};
		toGraph.values.push( obj );
	});
	
	return [toGraph];
}

function drawGraph( src ){

	nv.addGraph(function() {
	  var chart = nv.models.discreteBarChart()
	      .x(function(d) { return d.label })    //Specify the data accessors.
	      .y(function(d) { return d.value })
	      .staggerLabels(true)    //Too many bars and not enough room? Try staggering labels.
	      .tooltips(false)        //Don't show tooltips
	      .showValues(true)       //...instead, show the bar value right on top of each bar.
	      .transitionDuration(350)
	      ;

	  d3.select('#graph_container svg')
	      .datum( src )
	      .call(chart);

	  nv.utils.windowResize(chart.update);
	  $(".nv-axis text").css('fill','white');
	  return chart;
	});	
}

$( document ).ready(function() {

	drawGraph( getWeekGraphValues() );

	// Change nvd3 source? Figure out better place to put this 
	setInterval(function(){
		$( "text" ).each(function() {
	  		var delimited_text = ($(this).html()).split(".");
			if ( delimited_text.length == 2 ){
				$(this).html( delimited_text[0] );
			}
		});		
	},100);

});


</script>
<%= content_tag "div", id: "today_data", data: {url: @today_data } do %>
<% end %>
<%= content_tag "div", id: "week_data", data: {url: @week_data } do %>
<% end %>
<%= content_tag "div", id: "year_data", data: {url: @year_data } do %>
<% end %>
<%= content_tag "div", id: "past_week_data_0", data: {url: @past_week_data[0] } do %>
<% end %>
<%= content_tag "div", id: "past_week_data_1", data: {url: @past_week_data[1] } do %>
<% end %>
<%= content_tag "div", id: "past_week_data_2", data: {url: @past_week_data[2] } do %>
<% end %>
<%= content_tag "div", id: "past_week_data_3", data: {url: @past_week_data[3] } do %>
<% end %>
<%= content_tag "div", id: "this_year_data", data: {url: @this_year_data } do %>
<% end %>
<div style="color:white;"class="container ">
	<div class="page-header">
  		<h1>My Statistics <small></small></h1>
	</div>
	<div class="row time_constant">
		  <div class="col-xs-6 col-sm-4">
		  	<h3>Today</h3>
			<hr>
		  	<div id="today" class="count">
		  		<%= @today_data.size %>
		  	</div>
		  </div>
		  <div class="col-xs-6 col-sm-4">
		  	<h3>The Last 7 Days</h3>
			<hr>
		  	<div id="week" class="count">
				<%= @week_data.size %>
		  	</div>
		  </div>
		  <div class="col-xs-12 col-sm-4">
		  	<h3>This Month</h3>
			<hr>
		  	<div id="month" class="count">
				<%= @month_data.size %>
		  	</div>
		  </div>		  
	</div>
	<div class="row graph_tabs">
		<div class="col-xs-12 col-sm-12">
			<ul class="nav nav-tabs">
			  <li id='week_graph' class="active"><a class="tab_color">Last 7 Days</a></li>
			  <li id='month_graph'><a class="tab_color" >This Month</a></li>
			  <li id='year_graph'><a class="tab_color" >This Year</a></li>
			</ul>	
		</div>
	</div>
	<br><br>
	<div class="row graphs">
		<div id="graph_container" class="col-xs-12 col-sm-12">
			<svg>
			</svg>
		</div>
	</div>
</div>