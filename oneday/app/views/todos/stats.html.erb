<script>

// Camel Case - structures used in graphing/analysis
// Underscores - intermediates

function DateObj(iso8601){
	// Look into how the unary operator works.
	this.date = +moment(iso8601).format('D');
	this.month = +moment(iso8601).format('M');
	this.year = +moment(iso8601).format('YYYY');
	this.day = moment(iso8601).format('dddd');

	this.task_list = [];
}

function setupGraphValues_Week(){
		var weekGraphVals = [];


		for (var i = 0; i < 7; i++){
			//Walking back seven days. 
			var currDate = moment().subtract('days', i);
			var tempDate = new DateObj(currDate.format());
			weekGraphVals.push( tempDate );
		}

		return weekGraphVals;
}

function updateCount( db_entry, graphValues ){

	var iso8601 = db_entry.updated_at;

	// Date to add one task to
	var addTo = new DateObj( iso8601 );

	var findVal = _.findWhere( graphValues, { 
		date: addTo.date,
		month: addTo.month,
		year: addTo.year
	 } );

	//If entry found, and it should unless you designed wrong.
	if (findVal){
		// Rets shallow copy, so we can modify graphValues from here
		findVal.task_list.push( db_entry.name ); 
	}

}



function getWeekData(){

	var weekGraphValues = setupGraphValues_Week();
	var week_data = $('#week_data').data('url');

	_.each( week_data, function( entry ){
		updateCount( entry , weekGraphValues );
	});


	return weekGraphValues;	
}

// Format the raw data like so for nvd3	
// {key: "Title", values: [{label: "...", value: 10},{...},{...}]}
function getWeekGraphValues(){
	var raw = getWeekData();
	var toGraph = {};

	toGraph.key = "Tasks from the Last 7 Days";
	toGraph.values = [];

	_.each(raw, function(entry){
		var obj = {     
						label: entry.day,
						value: entry.task_list.length
				  };
		toGraph.values.push( obj );
	});

	toGraph.values.reverse();
	return [toGraph];
}


$( document ).ready(function() {
    
	nv.addGraph(function() {
	  var chart = nv.models.discreteBarChart()
	      .x(function(d) { return d.label })    //Specify the data accessors.
	      .y(function(d) { return d.value })
	      .staggerLabels(true)    //Too many bars and not enough room? Try staggering labels.
	      .tooltips(false)        //Don't show tooltips
	      .showValues(true)       //...instead, show the bar value right on top of each bar.
	      .transitionDuration(350)
	      ;

	  d3.select('#graph_container svg')
	      .datum( getWeekGraphValues() )
	      .call(chart);

	  nv.utils.windowResize(chart.update);
	  $(".nv-axis text").css('fill','white');
	  return chart;
	});

	// Change nvd3 source? Figure out better place to put this 
	setInterval(function(){
		$( "text" ).each(function() {
	  		var delimited_text = ($(this).html()).split(".");
			if ( delimited_text.length == 2 ){
				$(this).html( delimited_text[0] );
			}
		});		
	},100);

});


</script>
<%= content_tag "div", id: "today_data", data: {url: @today_data } do %>
<% end %>
<%= content_tag "div", id: "week_data", data: {url: @week_data } do %>
<% end %>
<%= content_tag "div", id: "year_data", data: {url: @year_data } do %>
<% end %>
<div style="color:white;"class="container ">
	<div class="page-header">
  		<h1>My Statistics <small></small></h1>
	</div>
	<div class="row time_constant">
		  <div class="col-xs-6 col-sm-4">
		  	<h3>Today</h3>
			<hr>
		  	<div id="today" class="count">
		  		<%= @today_count %>
		  	</div>
		  </div>
		  <div class="col-xs-6 col-sm-4">
		  	<h3>The Last 7 Days</h3>
			<hr>
		  	<div id="week" class="count">
				<%= @week_count %>
		  	</div>
		  </div>
		  <div class="col-xs-12 col-sm-4">
		  	<h3>This Month</h3>
			<hr>
		  	<div id="month" class="count">
				<%= @month_count %>
		  	</div>
		  </div>		  
	</div>
	<div class="row graph_tabs">
		<div class="col-xs-12 col-sm-12">
			<ul class="nav nav-tabs">
			  <li class="active"><a data-toggle="tab">Last 7 Days</a></li>
			  <li><a data-toggle="tab">This Month</a></li>
			  <li><a data-toggle="tab">This Year</a></li>
			</ul>	
		</div>
	</div>
	<br><br>
	<div class="row graphs">
		<div id="graph_container" class="col-xs-12 col-sm-12">
			<svg>
			</svg>
		</div>
	</div>
</div>